# Use PHP 8.2 CLI Alpine as base image for testing
FROM php:8.2-cli-alpine

# Set labels for better image management
LABEL maintainer="PlanHub Development Team"
LABEL description="Testing base image for PlanHub API with all dependencies"
LABEL version="1.0"

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache \
    git \
    curl \
    curl-dev \
    libpng-dev \
    libxml2-dev \
    zip \
    unzip \
    oniguruma-dev \
    libzip-dev \
    freetype-dev \
    libjpeg-turbo-dev \
    libwebp-dev \
    icu-dev \
    autoconf \
    g++ \
    make \
    openssl-dev \
    linux-headers \
    bash \
    mysql-client \
    sqlite \
    sqlite-dev \
    jq

# Install PHP extensions
RUN docker-php-ext-configure gd --with-freetype --with-jpeg --with-webp \
    && docker-php-ext-install \
        pdo_mysql \
        pdo_sqlite \
        mbstring \
        exif \
        pcntl \
        bcmath \
        gd \
        zip \
        intl \
        soap \
        opcache

# Install MongoDB extension
RUN pecl install mongodb-1.21.0 \
    && docker-php-ext-enable mongodb

# Install Redis extension
RUN pecl install redis \
    && docker-php-ext-enable redis

# Install Swoole extension
RUN pecl install swoole \
    && docker-php-ext-enable swoole

# Get latest Composer
COPY --from=composer:lts /usr/bin/composer /usr/bin/composer

# Install global testing tools and make them globally accessible
RUN composer global require \
        phpunit/phpunit:^9.0 \
        squizlabs/php_codesniffer:^3.11 \
        phpat/phpat:^0.10 \
    && composer global clear-cache \
    && ln -s /root/.composer/vendor/bin/* /usr/local/bin/ \
    && chmod +x /usr/local/bin/*

# Configure PHP for testing with more memory
RUN echo "memory_limit=1G" >> /usr/local/etc/php/conf.d/testing.ini \
    && echo "max_execution_time=300" >> /usr/local/etc/php/conf.d/testing.ini \
    && echo "display_errors=On" >> /usr/local/etc/php/conf.d/testing.ini \
    && echo "log_errors=On" >> /usr/local/etc/php/conf.d/testing.ini

# Create planhub user
RUN addgroup -g 1000 planhub \
    && adduser -u 1000 -G planhub -s /bin/bash -D planhub

# Create necessary directories with proper permissions
RUN mkdir -p /app/storage/logs \
             /app/storage/framework/cache \
             /app/storage/framework/sessions \
             /app/storage/framework/views \
             /app/bootstrap/cache \
    && chown -R planhub:planhub /app

# Switch to planhub user for runtime
USER planhub
WORKDIR /app

# Set environment variables for testing
ENV APP_ENV=testing
ENV DB_CONNECTION=sqlite
ENV DB_DATABASE=:memory:
ENV CACHE_DRIVER=array
ENV SESSION_DRIVER=array
ENV QUEUE_CONNECTION=sync
ENV MAIL_MAILER=array

# Default command - test available tools
CMD ["bash", "-c", "echo 'üß™ PlanHub API Testing Base Image' && echo 'Testing available tools...' && echo '' && echo 'üîç Testing PHP...' && php -v | head -1 && echo 'üîç Testing Composer...' && composer --version && echo 'üîç Testing PHPUnit...' && phpunit --version && echo 'üîç Testing PHPCS...' && phpcs --version && echo 'üîç Testing PHPStan (includes PHPat extension)...' && phpstan --version && echo '' && echo '‚úÖ All tools tested successfully!' && echo '' && echo 'Usage examples:' && echo '  docker run -v $(pwd):/app image-name composer install' && echo '  docker run -v $(pwd):/app image-name php artisan test' && echo '  docker run -v $(pwd):/app image-name phpcs --standard=planhubcs.xml' && echo '  docker run -v $(pwd):/app image-name phpstan analyse'"]

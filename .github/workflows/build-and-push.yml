name: Build and Push PHP Test Runner Base Image

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'Dockerfile.testing'
      - '.github/workflows/build-and-push.yml'
  pull_request:
    branches:
      - main
      - master
    paths:
      - 'Dockerfile.testing'
      - '.github/workflows/build-and-push.yml'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Custom tag for the image (optional)'
        required: false
        default: 'php-8.1.33'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ygdiaz/php-test-runner-base
  PHP_VERSION: php-8.1.33

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.PHP_VERSION }}
            type=ref,event=branch,prefix=${{ env.PHP_VERSION }}-
            type=sha,prefix=${{ env.PHP_VERSION }}-

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.testing
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 📊 Image digest
        run: echo ${{ steps.build-and-push.outputs.digest }}

  test-image:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔑 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🧪 Test image functionality
        run: |
          echo "🔍 Testing PHP version..."
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.PHP_VERSION }} php --version
          
          echo "🔍 Testing Composer..."
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.PHP_VERSION }} composer --version
          
          echo "🔍 Testing PHPUnit..."
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.PHP_VERSION }} phpunit --version
          
          echo "🔍 Testing PHPCS..."
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.PHP_VERSION }} phpcs --version
          
          echo "🔍 Testing PHPStan (includes PHPat extension)..."
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.PHP_VERSION }} phpstan --version
          
          echo "🔍 Testing Deptrac..."
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.PHP_VERSION }} deptrac --version
          
          echo "🔍 Testing Graphviz..."
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.PHP_VERSION }} dot -V
          
          echo "🔍 Testing PCOV extension..."
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.PHP_VERSION }} php -m | grep pcov || (echo "❌ PCOV not found" && exit 1)
          
          echo "🔍 Testing PCOV coverage functionality..."
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.PHP_VERSION }} bash -c "
            echo '<?php echo \"Hello World\";' > /tmp/test.php &&
            echo '<?php class TestClass { public function test() { include \"/tmp/test.php\"; } }' > /tmp/TestClass.php &&
            echo '<?php require \"/tmp/TestClass.php\"; use PHPUnit\\Framework\\TestCase; class CoverageTest extends TestCase { public function testCoverage() { (new TestClass())->test(); \$this->assertTrue(true); } }' > /tmp/CoverageTest.php &&
            phpunit --coverage-text --whitelist /tmp/test.php /tmp/CoverageTest.php 2>&1 | grep -E '(Lines:|Methods:|Classes:)' || echo 'Coverage test completed'
          "
          
          echo "✅ All tools tested successfully!"
